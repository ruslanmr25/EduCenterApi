// <auto-generated />
using System;
using System.Collections.Generic;
using EduCenterApi.Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EduCenterApi.Infrastructure.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20250404083947_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EduCenterApi.Domain.Entities.Center", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("centers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminId = -1,
                            Name = "Center 1"
                        });
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BeginDate")
                        .HasColumnType("date")
                        .HasColumnName("begin_date");

                    b.Property<int>("CenterId")
                        .HasColumnType("integer")
                        .HasColumnName("center_id");

                    b.PrimitiveCollection<int[]>("Days")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<int>("SinceId")
                        .HasColumnType("integer")
                        .HasColumnName("since_id");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.Property<int>("TeacherPortion")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_portion");

                    b.PrimitiveCollection<List<TimeOnly>>("Times")
                        .IsRequired()
                        .HasColumnType("time without time zone[]")
                        .HasColumnName("times");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("SinceId");

                    b.HasIndex("TeacherId");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CenterAdmin"
                        },
                        new
                        {
                            Id = 1,
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.Since", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("integer")
                        .HasColumnName("center_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("sinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CenterId = 1,
                            Name = "matematika"
                        });
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.TeacherCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("integer")
                        .HasColumnName("center_id");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("TeacherId");

                    b.ToTable("teacher_center");
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            FullName = "Center Admin",
                            Password = "123",
                            RoleId = 2,
                            Username = "ruslan"
                        },
                        new
                        {
                            Id = 1,
                            FullName = "Teacher",
                            Password = "123",
                            RoleId = 3,
                            Username = "teacher"
                        });
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.Center", b =>
                {
                    b.HasOne("EduCenterApi.Domain.Entities.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.Group", b =>
                {
                    b.HasOne("EduCenterApi.Domain.Entities.Center", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCenterApi.Domain.Entities.Since", "Since")
                        .WithMany()
                        .HasForeignKey("SinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCenterApi.Domain.Entities.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Since");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.Since", b =>
                {
                    b.HasOne("EduCenterApi.Domain.Entities.Center", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.TeacherCenter", b =>
                {
                    b.HasOne("EduCenterApi.Domain.Entities.Center", "Center")
                        .WithMany("TeacherCenters")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCenterApi.Domain.Entities.User", "Teacher")
                        .WithMany("TeacherCenters")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.User", b =>
                {
                    b.HasOne("EduCenterApi.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.Center", b =>
                {
                    b.Navigation("TeacherCenters");
                });

            modelBuilder.Entity("EduCenterApi.Domain.Entities.User", b =>
                {
                    b.Navigation("TeacherCenters");
                });
#pragma warning restore 612, 618
        }
    }
}
