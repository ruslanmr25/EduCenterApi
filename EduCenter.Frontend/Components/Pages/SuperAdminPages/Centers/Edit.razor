@page "/super-admin/centers/{Id:int}/edit"

<EditForm Model="@UpdateCenterDto" OnValidSubmit="HandleSubmitAsync">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Name:</label>
        <InputText @bind-Value="UpdateCenterDto.Name" class="form-control" />
        <ValidationMessage For="@(() => UpdateCenterDto.Name)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label>Admin:</label>
        <InputSelect @bind-Value="UpdateCenterDto.AdminId" class="form-control">
            <option value="">-- Admin tanlang --</option>
            @foreach (var user in Users ?? Enumerable.Empty<User>())
            {
                <option value="@user.Id">@user.FullName</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => UpdateCenterDto.AdminId)" class="text-danger" />
    </div>

    <button type="submit" class="btn btn-primary">Saqlash</button>
</EditForm>

@code {
    [Parameter] public int Id { get; set; }

    [Inject] public UserClient UserClient { get; set; } = default!;
    [Inject] public CenterClient CenterClient { get; set; } = default!;
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;

    private UpdateCenterDto UpdateCenterDto { get; set; } = new();
    private IEnumerable<User>? Users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var center = await CenterClient.GetCenterByIdAsync(Id);
        UpdateCenterDto.Name = center.Name;
        UpdateCenterDto.AdminId = center.AdminId;

        var response = await UserClient.GetAllAsync();
        Users = response.Items;
    }

    private async Task HandleSubmitAsync()
    {
        await CenterClient.UpdateAsync(Id, UpdateCenterDto);
        NavigationManager.NavigateTo("/super-admin/centers");
    }
}
